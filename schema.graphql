type Pool @entity {
  id: ID!

  # It's not possible to simply retrieve all entities, but it is supported
  # to get all entities by a field. Hence we add the same type field to all
  # pools, so we can do Pool.getByType("POOL").
  type: String! @index
  
  currency: String!
  metadata: String!

  minEpochTime: Int!
  challengeTime: Int!
  maxNavAge: Int!

  currentEpoch: Epoch!
  lastEpochClosed: Epoch!
  lastEpochExecuted: Epoch!

  tranches: [Tranche] @derivedFrom(field: "pool")

  currentState: PoolState
}

type Tranche @entity {
  id: ID!

  pool: Pool!

  isResidual: Boolean!
  seniority: Int!
  interestRate: BigInt
  minRiskBuffer: BigInt
}

type TrancheState @entity {
  id: ID!

  tranche: Tranche!

  supply: BigInt!
  price: BigInt!
  poolState: PoolState!
  # invest: BigInt!
  # redeem: BigInt!
}

# Track all state that regularly changes
type PoolState @entity {
  id: ID!

  netAssetValue: BigInt!
  totalReserve: BigInt!
  availableReserve: BigInt!
  maxReserve: BigInt!
  # debt: BigInt!

  # trancheState: [TrancheState] @derivedFrom(field: "poolState")
}

type DailyPoolState @entity {
  id: ID!
  
  timestamp: Date!
  poolState: PoolState!
}

type Epoch @entity {
  id: ID!
  
  # This cannot reference Pool directly, since this leads to a cyclic dependency
  # pools => epochs => pools (through the currentEpoch etc fields).
  poolId: String!

  index: Int!

  openedAt: Date!
  closedAt: Date
  executedAt: Date

  # openPoolState: PoolState!
  # closePoolState: PoolState
  # executePoolState: PoolState

  investorTransactions: [InvestorTransaction] @derivedFrom(field: "epoch")
  # borrowerActions: 
}

enum InvestorTransactionType {
  INVEST_ORDER_UPDATE
  REDEEM_ORDER_UPDATE
  INVEST_ORDER_CANCEL
  REDEEM_ORDER_CANCEL
  INVEST_EXECUTION
  REDEEM_EXECUTION
  TRANSFER_IN
  TRANSFER_OUT
}

type InvestorTransaction @entity {
  id: ID! # transaction hash

  # account: Account! @index
  pool: Pool! @index
  # tranche: Tranche! @index
  epoch: Epoch! @index
  timestamp: Date!
  type: InvestorTransactionType!
  tokenAmount: BigInt
  currencyAmount: BigInt
  tokenPrice: BigInt
  transactionFee: BigInt
}

type Account @entity {
  id: ID!

  publicAddress: String!
}