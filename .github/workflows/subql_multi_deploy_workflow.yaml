on:
  workflow_call:
    inputs:
      chainId:
        required: true
        type: string
      projOrg:
        required: true
        type: string
      projImage:
        required: false
        type: string
      deploymentType:
        description: stage or primary
        required: false
        type: string
        default: stage
      resetProject:
        default: false
        type: boolean
    secrets:
      accessToken:
        required: true
      onfinalityApiKey:
        required: true

jobs:
  subql_deploy_workflow:
    runs-on: ubuntu-latest
    env:
      SUBQL_INDEXER_VERSION: v4.0.1
      SUBQL_ETH_INDEXER_VERSION: v4.1.0
      SUBQL_QUERY_VERSION: v2.10.0
      CHAIN_ID: ${{ inputs.chainId }}
      SUBQL_ACCESS_TOKEN: ${{ secrets.accessToken }}
      SUBQL_PROJ_ORG: ${{ inputs.projOrg }}
      SUBQL_PROJ_IMAGE: ${{ inputs.projImage }}
      SUBQL_DEPLOYMENT_TYPE: ${{ inputs.deploymentType }}
      ONFINALITY_API_KEY: ${{ secrets.onfinalityApiKey }}
    environment:  ${{ inputs.chainId == 'centrifuge' && 'pools-multichain' || format('pools-{0}-multichain', inputs.chainId) }}
    steps:
      - name: Check out repo's default branch
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
      - name: Setup Yarn
        run: yarn install --frozen-lockfile
      - name: Codegen
        run: |
          CHAIN_ID=centrifuge yarn projectgen
          yarn codegen
      - name: SubQL CLI Version
        run: yarn subql --version
      - name: Generate new project data
        run: 'yarn projectgen'
      - name: Extract Chain Parameters to ENV
        run: |
          SUBQL_ENDPOINTS=""
          SUBQL_DICTIONARIES=""
          SUBQL_VERSIONS=""
          for projectFile in project-*.yaml; do
            echo "Reading $projectFile"
            chainId=$(yq '.network.chainId' $projectFile)
            endpoint=$(yq '.network.endpoint' $projectFile)
            dictionary=$(yq '.network.dictionary' $projectFile)

            if [[ -n "$SUBQL_ENDPOINTS" ]]; then SUBQL_ENDPOINTS+=","; fi
            SUBQL_ENDPOINTS+="${chainId}:${endpoint}"

            if [[ "$dictionary" != "null" ]]; then
              if [[ -n "$SUBQL_DICTIONARIES" ]]; then SUBQL_DICTIONARIES+=","; fi
              SUBQL_DICTIONARIES+="${chainId}:${dictionary}"
            fi
          done
          echo "SUBQL_PROJ_NAME=$(yq '.name' project-centrifuge.yaml)-multichain" >> $GITHUB_ENV
          echo "SUBQL_PROJ_DECRIPTION=$(yq '.description' project-centrifuge.yaml)" >> $GITHUB_ENV
          echo "SUBQL_ENDPOINTS=${SUBQL_ENDPOINTS}" >> $GITHUB_ENV
          echo "SUBQL_DICTIONARIES=${SUBQL_DICTIONARIES}" >> $GITHUB_ENV
      - name: Publish SubQL version
        run: |
          echo "IPFSCID=$(node_modules/.bin/subql publish -o)" >> $GITHUB_ENV
      - name: Delete Project
        if: ${{ inputs.resetProject }}
        run: |
          npx subql project:delete-project \
          --org="$SUBQL_PROJ_ORG" \
          --projectName="$SUBQL_PROJ_NAME"
        continue-on-error: true
      - name: Create Project
        if: ${{ inputs.resetProject }}
        run: |
          npx subql project:create-project \
          --apiVersion=2 \
          --description="$SUBQL_PROJ_DESCRIPTION" \
          --gitRepo="https://github.com/$GITHUB_REPOSITORY" \
          --org="$SUBQL_PROJ_ORG" \
          --projectName="$SUBQL_PROJ_NAME" \
          --logoURL="$SUBQL_PROJ_IMAGE"
      - name: Deploy Multichain Version
        run: |
          npx subql multi-chain:deploy \
          -d \
          --location=./subquery-multichain.yaml \
          --org="$SUBQL_PROJ_ORG" \
          --projectName="$SUBQL_PROJ_NAME" \
          --endpoint="$SUBQL_ENDPOINTS" \
          --dict="$SUBQL_DICTIONARIES" \
          --type=$SUBQL_DEPLOYMENT_TYPE \
          --disableHistorical \
          --indexerWorkers=1 \
          --indexerUnsafe \
          --queryAggregate

